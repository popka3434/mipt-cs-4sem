package ru.mipt.spring2014.class04.cust_gui;

import java.awt.*;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;

/**
 *
 * @author Andrei
 */
public class GraphPanel extends javax.swing.JPanel
{
	private static final double
			MIN_X = -2, MAX_X = 5, X_STEP = 0.1,
			MIN_Y = -2, MAX_Y = 2;
	private static final String IMAGE_RES_PATH = "simons_cat.jpg";

	private static double calculateFunction (double x)
	{
		return x >= 0 ? Math.pow (x, 1.0 / 3.0) : -Math.pow (-x, 1.0 / 3.0);
	}

	private static Image loadImageResource (String resPath) throws IOException
	{
		final InputStream in = GraphPanel.class.getResourceAsStream (resPath);
		if (in == null)
		{
			throw new RuntimeException ("Couldn't find image resource: " + resPath);
		}
		try{
			return ImageIO.read (in);
		} finally
		{
			in.close ();
		}
	}

	private final Image img;
	private final ImageMover backend;
	private final int imgWidth, imgHeight;

	/**
	 * Creates new form GraphPanel
	 */
	public GraphPanel ()
	{
		try{
			img = loadImageResource (IMAGE_RES_PATH);
			imgWidth = img.getWidth (this);
			imgHeight = img.getHeight (this);
		} catch (IOException e)
		{
			throw new RuntimeException ("Couldn't load image resource: " + IMAGE_RES_PATH, e);
		}

		backend = new ImageMover (this);
		backend.setVelocity (3, 2);
		backend.resize (getWidth () - imgWidth, getHeight () - imgHeight);

		initComponents ();

		backend.start ();
	}

	private int getXCoord (double x)
	{
		return (int) ((x - MIN_X) / (MAX_X - MIN_X) * getWidth ());
	}

	private int getYCoord (double y)
	{
		return (int) ((MAX_Y - y) / (MAX_Y - MIN_Y) * getHeight ());
	}

	private void drawAxes (Graphics2D graphics, double x0, double y0)
	{
		graphics.setColor (Color.BLACK);

		graphics.drawLine (getXCoord (MIN_X), getYCoord (y0), getXCoord (MAX_X), getYCoord (y0));
		graphics.drawLine (getXCoord (x0), getYCoord (MIN_Y), getXCoord (x0), getYCoord (MAX_Y));
	}

	private void grawGraph (Graphics2D graphics)
	{
		graphics.setColor (Color.RED);
		int currX = getXCoord (MIN_X);
		int currY = getYCoord (calculateFunction (MIN_X));
		for (double x = MIN_X + X_STEP; x <= MAX_X; x += X_STEP)
		{
			int nextX = getXCoord (x);
			int nextY = getYCoord (calculateFunction (x));
			graphics.drawLine (currX, currY, nextX, nextY);
			currX = nextX;
			currY = nextY;
		}
	}

	private void drawImage (Graphics2D graphics)
	{
		final Point position = backend.getCurrentPosition ();
		graphics.drawImage (img,
				position.x,
				position.y,
				this);
	}

	/**
	 * Paint panel content
	 */
	@Override
	public void paint (Graphics g)
	{
		final Graphics2D graphics = (Graphics2D) g;

		graphics.setBackground (Color.WHITE);
		graphics.clearRect (0, 0, getWidth (), getHeight ());

		drawImage (graphics);
//
//		drawAxes (graphics, 0, 0);
//		grawGraph (graphics);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

	private void formComponentResized (java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
	{//GEN-HEADEREND:event_formComponentResized
		backend.resize (getWidth () - imgWidth, getHeight () - imgHeight);
	}//GEN-LAST:event_formComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
